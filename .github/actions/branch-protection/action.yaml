---
# Filename: .github/actions/branch-protection/action.yaml
name: "Set Branch Protection"
description: "Sets branch protection rules for default and non-default branches"
inputs:
  is_default_branch:
    description: "Set to 'true' to apply default branch protection rules. 'false'
      for non-default branches."
    required: true
    default: "false"
  github-token:
    description: "GitHub token for authentication"
    required: true
runs:
  using: "composite"
  steps:
    - name: Determine Branch for Protection
      id: determine-branch
      shell: bash
      run: |
        if [[ "${{ inputs.is_default_branch }}" == "true" ]]; then
          echo "Applying protection to default branch..."
          echo "branch=${{ github.event.repository.default_branch }}" >> $GITHUB_OUTPUT
        else
          echo "Applying protection to non-default branch..."
          echo "branch=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
        fi
    - name: Apply Branch Protection Rules
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
      run: |-
        branch="${{ steps.determine-branch.outputs.branch }}"
        if [[ "${{ inputs.is_default_branch }}" == "true" ]]; then
          strict_contexts='["Super Linter"]'
          required_reviews=1
          allow_force_pushes=false
          allow_deletions=false
          required_linear_history=true
        else
          strict_contexts='[]'
          required_reviews=null
          allow_force_pushes=true
          allow_deletions=true
          required_linear_history=false
        fi

        # Construct JSON payload
        json_payload=$(
          jq -n \
            --argjson strict_contexts "$strict_contexts" \
            --argjson required_reviews "$required_reviews" \
            --arg allow_force_pushes "$allow_force_pushes" \
            --arg allow_deletions "$allow_deletions" \
            --arg required_linear_history "$required_linear_history" \
            '{
              required_status_checks: { strict: true, contexts: $strict_contexts },
              enforce_admins: false,
              required_pull_request_reviews: $required_reviews | objects,
              restrictions: null,
              allow_force_pushes: $allow_force_pushes | fromjson,
              allow_deletions: $allow_deletions | fromjson,
              required_linear_history: $required_linear_history | fromjson
            }'
        )

        echo "Setting branch protection for branch: ${branch}"
        echo "JSON payload: $json_payload"

        gh api --method PUT \
          -H "Accept: application/vnd.github+json" \
          "/repos/${{ github.repository }}/branches/${branch}/protection" \
          --input <(echo "$json_payload")
