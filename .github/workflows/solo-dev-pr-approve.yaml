---
# Filename: .github/workflows/solo-dev-pr-approve.yaml
name: "Solo Dev PR Approval Workflow"
on:  # yamllint disable-line rule:truthy
  # usage: gh workflow run solo-dev-pr-approve.yaml --field pr_number=<>
  workflow_dispatch:
    inputs:
      pr_number:
        description: "The pull request number to be checked"
        required: true
        type: number
  pull_request:  # temporary for debugging
jobs:
  check-pr-readiness:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
      - name: Get repository owner and actor
        id: owner-check
        env:
          GH_TOKEN: ${{ github.token }}
        run: |-
          REPO_OWNER=$(gh api repos/${{ github.repository }} --jq '.owner.login')
          echo "Repository Owner: $REPO_OWNER"
          echo "Triggered by: ${{ github.actor }}"

          if [[ "$REPO_OWNER" != "${{ github.actor }}" ]]; then
            echo "Error: Only the repository owner can trigger this workflow."
            exit 1
          fi
  pr-readiness-check:
    runs-on: ubuntu-latest
    needs: check-pr-readiness
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
      - name: Create payload for PR details
        id: pr-details
        env:
          GH_TOKEN: ${{ github.token }}
        run: |-
          # Uncomment to use dynamic input
          # PR_NUMBER="${{ inputs.pr_number }}"
          PR_NUMBER=22  # Temporary hardcoded value for debugging
          echo "Fetching details for PR number: $PR_NUMBER"

          # Fetch PR details and save to file
          gh pr view "$PR_NUMBER" --json state,mergeable > pr_payload.json

          PR_STATE=$(jq -r '.state' pr_payload.json)
          PR_MERGEABLE=$(jq -r '.mergeable' pr_payload.json)
          echo "PR_STATE=$PR_STATE" >> "$GITHUB_ENV"
          echo "PR_MERGEABLE=$PR_MERGEABLE" >> "$GITHUB_ENV"
      - name: Validate PR state
        env:
          GH_TOKEN: ${{ github.token }}
        run: |-
          if [[ "$PR_STATE" != "OPEN" ]]; then
            echo "Error: PR is not open for review."
            exit 1
          fi

          if [[ "$PR_MERGEABLE" != "MERGEABLE" ]]; then
            ERROR_MSG="Error: PR is not in a mergeable state \
            (possible conflicts or missing checks)."
            echo "$ERROR_MSG"
            exit 1
          else
            echo "PR is ready for review!"
          fi
  check-reviewer-count:
    runs-on: ubuntu-latest
    needs: pr-readiness-check
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
      - name: Get the number of reviewers
        id: reviewer-count
        env:
          GH_TOKEN: ${{ github.token }}
        run: |-
          REVIEWERS=$(gh api -H "Accept: application/vnd.github+json" \
            "/repos/${{ github.repository }}/collaborators?affiliation=direct" \
            --jq '[.[] | select(.permissions.push == true)] | length')
          echo "REVIEWER_COUNT=$REVIEWERS" >> "$GITHUB_ENV"
      - name: Validate reviewer count
        env:
          GH_TOKEN: ${{ github.token }}
        run: |-
          if [[ "$REVIEWER_COUNT" -gt 1 ]]; then
            echo "There are multiple reviewers. Manual review is required."
            exit 1
          else
            echo "Solo developer detected. Proceeding with auto-approval."
          fi
  auto-approve-pr:
    runs-on: ubuntu-latest
    needs: check-reviewer-count
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
      - name: Generate JWT and Installation Token
        id: generate-token
        env:
          PRIVATE_KEY: ${{ secrets.AUTO_APPROVE_PRIVATE_KEY }}
          APP_ID: ${{ secrets.GITHUB_APP_ID }}
        run: |-
          echo "$PRIVATE_KEY" | base64 --decode > private-key.pem

          HEADER=$(echo -n '{"alg":"RS256","typ":"JWT"}' | base64 | tr -d '=')
          ISSUED_AT=$(date +%s)
          EXPIRATION=$((ISSUED_AT + 600))
          PAYLOAD=$(echo -n "{\"iat\":$ISSUED_AT,\"exp\":$EXPIRATION,\"iss\":$APP_ID}" | \
            base64 | tr -d '=')
          SIGNATURE=$(printf "%s.%s" "$HEADER" "$PAYLOAD" | openssl dgst -binary -sha256 \
            -sign private-key.pem | base64 | tr -d '=' | tr '/+' '_-' | tr -d '\n')
          JWT="$HEADER.$PAYLOAD.$SIGNATURE"

          INSTALLATION_ID=$(gh api /app/installations --jq '.[0].id')
          POST_STRING="/app/installations/$INSTALLATION_ID/access_tokens"
          TOKEN=$(gh api --method POST "$POST_STRING" \
            -H "Authorization: Bearer $JWT" \
            -H "Accept: application/vnd.github+json" | jq -r '.token')
          echo "APP_TOKEN=$TOKEN" >> "$GITHUB_ENV"
      - name: Approve the pull request
        env:
          APP_TOKEN: ${{ secrets.AUTO_APPROVE_PRIVATE_KEY }}
        run: |-
          # Uncomment to use dynamic input
          # PR_NUMBER="${{ github.event.inputs.pr_number }}"
          PR_NUMBER=22  # Temporary for debugging
          echo "Approving pull request #$PR_NUMBER"
          BODY="Auto-approved by solo developer workflow."
          gh pr review "$PR_NUMBER" --approve --body "$BODY"
