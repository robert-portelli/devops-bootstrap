---
# Filename: .github/workflows/solo-dev-pr-approve.yaml
name: "Solo Dev PR Approval Workflow"
on:  # yamllint disable-line rule:truthy
  # usage: gh workflow run solo-dev-pr-approve.yaml --field pr_number=<>
  workflow_dispatch:
    inputs:
      pr_number:
        description: "The pull request number to be checked"
        required: true
        type: number
  pull_request:  # temporary for debugging
jobs:
  check-pr-readiness:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
      - name: Get repository owner and actor
        id: owner-check
        env:
          GH_TOKEN: ${{ github.token }}
        run: |-
          REPO_OWNER=$(gh api repos/${{ github.repository }} --jq '.owner.login')
          echo "Repository Owner: $REPO_OWNER"
          echo "Triggered by: ${{ github.actor }}"

          if [[ "$REPO_OWNER" != "${{ github.actor }}" ]]; then
            echo "Error: Only the repository owner can trigger this workflow."
            exit 1
          fi
  pr-readiness-check:
    runs-on: ubuntu-latest
    needs: check-pr-readiness
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
      - name: Create payload for PR details
        id: pr-details
        env:
          GH_TOKEN: ${{ github.token }}
        run: |-
          # PR_NUMBER="${{ inputs.pr_number }}"
          PR_NUMBER=22  # temporary for debugging
          echo "Fetching details for PR number: $PR_NUMBER"

          # Create the JSON payload file
          gh pr view "$PR_NUMBER" --json state,mergeable > pr_payload.json

          # Extract the status and save to environment variables
          PR_STATE=$(jq -r '.state' pr_payload.json)
          PR_MERGEABLE=$(jq -r '.mergeable' pr_payload.json)
          echo "PR_STATE=$PR_STATE" >> "$GITHUB_ENV"
          echo "PR_MERGEABLE=$PR_MERGEABLE" >> "$GITHUB_ENV"
      - name: Validate PR state
        env:
          GH_TOKEN: ${{ github.token }}
        run: |-
          if [[ "$PR_STATE" != "OPEN" ]]; then
            echo "Error: PR is not open for review."
            exit 1
          fi

          if [[ "$PR_MERGEABLE" != "MERGEABLE" ]]; then
            ERROR_MSG="Error: PR is not in a mergeable state \
              (possible conflicts or missing checks)."
            echo "$ERROR_MSG"
            exit 1
          else
            echo "PR is ready for review!"
          fi
